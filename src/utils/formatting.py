from fix.utils.formatting import Text, Code, as_list
from typing import Optional, List, Dict, Any


def text(string: Optional[str]) -> Text:
    return Text(string or '')


def spoiler_fields(include: Optional[List[int]], exclude: Optional[List[int]]) -> Text:
    if not include and not exclude:
        return Text('–õ—é–±—ã–µ')
    return as_list(
        *filter(lambda _: _, (
            f'–í—ã–±—Ä–∞–Ω–æ {len(include)}' if include else '',
            f'–ò—Å–∫–ª—é—á–µ–Ω–æ {len(exclude)}' if exclude else ''
        )),
        sep='    '
    )


def interval(minimum: Optional[int], maximum: Optional[int]) -> Optional[Text]:
    match minimum, maximum:
        case None, None:
            return
        case _, None:
            return Text('–ë–æ–ª—å—à–µ ', Code(minimum))
        case None, _:
            return Text('–ú–µ–Ω—å—à–µ ', Code(maximum))
        case _, _:
            return Text('–ë–æ–ª—å—à–µ ', Code(minimum), ' –∏ –º–µ–Ω—å—à–µ ', Code(maximum))


def select_fields(fields: Optional[List[int]], constant: List[Dict[str, Any]]) -> Optional[Text]:
    if fields:
        return as_list(*(
            '‚úÖ ' + field['label']
            for field in constant
            if field['id'] in fields
        ))


def marked_fields(include: Optional[List[int]], exclude: Optional[List[int]], constant: List[Dict[str, Any]]) -> Optional[Text]:
    if duo := (include or []) + (exclude or []):
        return as_list(*(
            ('‚ùáÔ∏è ' if include and field['id'] in include else 'üÖæÔ∏è ') + field['name']
            for field in constant
            if field['id'] in duo
        ))


def other_fields(long_no_translation: Optional[int], licensed: Optional[int], buy: Optional[int]) -> Optional[Text]:
    if long_no_translation or licensed is not None or buy:
        return as_list(
            *filter(lambda _: _, (
                ('‚úÖ –ù–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ —É–∂–µ 3 –º–µ—Å—è—Ü–∞' if long_no_translation else None),
                (('‚ùáÔ∏è ' if licensed else 'üÖæÔ∏è ') + '–õ–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω' if licensed is not None else None),
                ('‚úÖ –ú–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏' if buy else None)
            ))
        )
